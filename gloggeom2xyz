#!/bin/bash
set -eu

function help(){
cat <<EOF
gloggeom2xyz
    convert geometry data in gaussian log to xyz

usage:
    + gloggeom2xyz [option] log
    +--- convert log to xyz and save to xyz with an appropriate name automatically
    |
    + gloggeom2xyz [option] log > xyz
    +--- save to the xyz file
    |
    + gloggeom2xyz [option] log | <COMMAND>
    +--- input to the command
    |
    + <COMMAND> | gloggeom2xyz [option]
    +--- convert the entered gaussian log data and print to stdout
    |
    + gloggeom2xyz [option] <(<COMMAND>)
    +--- If input by process substitution, print to stdout

option usage:
    -h, -help, --help              | display this help
    -s, -step, --step <num>        | set number of structure to retrieve
                                   | only natural numbers or '$' are valid
                                   | '$' means last structure
                                   | For example, if you have optimized the structure, the most stable structure will be output.
                                   | default: '$'
    -o, -orient, --orient <s or i> | whether to output standard orientation or input orientation
                                   | default: 's'

EOF
}

function error() {
	exec 1>&2
	help
	while [ "$#" -ge 1 ]; do echo -e "\e[31m$1\e[m"; shift; done
	exit 1
}

function getNumAtom(){
	# get number of atoms
	local glogFile="$1"

	# 'Input orientation' is not output in some cases, so the number of atoms is counted from 'Standard orientation'
	cat "$glogFile" |
		sed -r '1,/^ +Standard orientation: +$/d' |        # delete from header through route section to orientation
		sed -e '1iStandard orientation' |                  # add 'orientation' string that was deleted above to simplify this code
		sed -r -n '1,/Standard orientation/p' |            # extract to include only the first geometry information
		sed -r '/Standard orientation/,/^ -+$/s/^ -+$//' | # delete the line with only hyphens from the top, twice
		sed -r '/Standard orientation/,/^ -+$/s/^ -+$//' |
		sed -r -n '1,/^ -+$/p' |     # extract only geometry information
		sed -e '$d' |                # remove last hyphen-only line
		sed -r '/^$/d' |             # extract only lines with coordinates written
		sed -r -n '/^[ 0-9.-]+$/p' |
		wc -l                        # count

}

function getMolecularFormula(){
	# get molecular formula
	local glogFile="$1"

	cat "$glogFile" |
		grep Stoichiometry |
		sed -r 's/.+ //' |
		uniq
}

# ------------------------------------------------------------------

# parse options
while [ "$#" -gt 0 ] ;
do
	case "$1" in
	-h | -help | --help)
		help
		exit
		;;
	-s | -step | --step)
		# the step number of the structure to retrieve
		stepnum="$2"
		shift 2

		# check
		if [[ ! "$stepnum" =~ ^[0-9]+$ ]] && [ ! "$stepnum" = '$' ]; then
			error "--step must be a natural number or '$' for the last line"
		fi
		if [ "$stepnum" = 0 ]; then
			error "--step must be greater than 0"
		fi
		;;
	-o | -orient | --orient)
		# Input orientation or Standard orientation
		if [ "$2" = s ]; then
			orient='Standard orientation'
		elif [ "$2" = i ]; then
			orient='Input orientation'
		else
			error "--orient must be 's' or 'i'"
		fi
		shift 2
		;;
	-*)
		error "unknown option: '$*'"
		;;
	*)
		break
		;;
	esac
done

# set input filename
if [ "$#" -gt 0 ]; then
	# if there are arguments
	glogFile="$1"
	# check
	if [ ! -f "$glogFile" ]; then
		error "gloggeom2xyz: No such file: $glogFile"
	fi
elif [ ! -t 0 ]; then
	# if there is a pipe input
	glogFile="-"
else
	error "log file is not set"
fi

# set output destination
if [ -t 1 ]; then
	# when output to the terminal is expected
	if [ "$glogFile" = "-" ]; then
		# if the input was a pipe
		# output to the terminal (no modification)
		:
	elif [[ "$glogFile" =~ ^/dev/fd ]]; then
		# if input by process substitution
		# output to the terminal (no modification)
		:
	else
		# remove trailing log(out) and make sure mol2 is attached
		# sed -r 's/.(log|out)$/.xyz/': problem occurs if it does not end with 'log' or 'out'
		xyzFile=`echo "${glogFile}" | sed -r 's/.(log|out)$//' | sed -r 's/$/.xyz/'`
		exec > "$xyzFile"
	fi
fi


# ------------------------------------------------------------------



# get geometry
# original data in log file:
#                          Input orientation:
# ---------------------------------------------------------------------
# Center     Atomic      Atomic             Coordinates (Angstroms)
# Number     Number       Type             X           Y           Z
# ---------------------------------------------------------------------
#      1          6           0       -2.235209    0.056525    0.069806
#      2          6           0       -0.723949    0.021728    0.006217
#      3          6           0        0.034492    1.181562    0.234182
#      4          6           0        1.432938    1.146099    0.206275
#.......
#     15          1           0       -0.608339   -2.085353   -0.443042
# ---------------------------------------------------------------------
cat "$glogFile" |
	sed -r '/'"$orient"'/,/^ -+$/s/^ -+$//' | # replace the first hyphen line with an empty line
	sed -r '/'"$orient"'/,/^ -+$/s/^ -+$//' | # replace the second hyphen line with an empty line
	sed -r -n '/'"$orient"'/,/^ -+$/p' |      # extract from '(Input|Standard) orientation' to hyphen line
	sed -r -n '/^[ 0-9.-]+$/p' |    # extract the line of coordinate data and the last hyphen line
	sed -r 's/^ -+$//' |            # replace last hyphen line with empty line
	sed -z -r 's/([0-9])\n/\1n/g' | # combine lines of coordinate data into one line
	uniq |                          # drop the same geometry data by uniq
	sed -r 's/n/\n/g'               # convert one row of data back to original table format












