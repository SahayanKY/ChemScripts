#!/bin/bash

#flowchart
#check -o option
#	-o -: stdout
#	-o file: out to file
#	-o subpatt: out to file which name is decided by subpatt
#check input
#	pipe:
#		if -o subpatt, error exit
#		if -o file, then IO follow it
#		else: stdout
#	ps sub(any):
#		if -o subpatt, error exit
#		if -o file, then IO follow it
#		else: stdout
#	file(all):
#		if -o subpatt and there is even one "-" as input, error exit
#		if -o file and -o -, then IO follow it
#		if [-t1] is true, out to file according to the default patt
#		else: stdout
#
#

function abstract_help(){
	local cmd="$1"
	local inp="$2"
	local out="$3"
cat <<EOF
${cmd}
    convert ${inp} to ${out}

usage:
    + ${cmd} ${inp}
    +--- convert ${inp} to ${out} and save to ${out} with an appropriate name automatically
    |
    + ${cmd} ${inp} > ${out}
    +--- save to the ${out} file
    |
    + ${cmd} ${inp} | <COMMAND>
    +--- input to the command
    |
    + <COMMAND> | ${cmd}
    +--- convert the entered ${inp} data and print to stdout
    |
    + ${cmd} <(<COMMAND>)
    +--- If input by process substitution, print to stdout

option usage:
    -h, -help, --help | display this help

EOF
}

function error(){
	exec 1>&2
	help
	while [ "$#" -ge 1 ]; do echo -e "\e[31m$1\e[m"; shift; done
	exit 1
}

function set_args(){
	args=("$0" "$@")
}

function shift_args(){
	local n="$1"
	args=("${args[@]:$n}")
}

function parse_args(){
	# parse -o option
	if [ "${#args[@]}" -ge 2 ] && [ "${args[1]}" = "-o" ]; then
		outputDestIsForced=true
		forcedOutputDestType= # 1: stdout, 2: file(patt), 3: file(fix)
		local value="${args[2]}"
		if [ "$value" = "-" ]; then
			forcedOutputDestType=1
			forcedOutputDest="-"
		elif echo "" | sed -r "$value" > /dev/null 2> /dev/null; then
			forcedOutputDestType=2
			forcedOutputDestPatt="$value"
		else
			forcedOutputDestType=3
			forcedOutputDest="$value"
		fi
		shift_args 2
	else
		outputDestIsForced=false
		forcedOutputDestType=0
		forcedOutputDest="-"
	fi

	# parse option
	parse_option

	# parse inp data and out
	inpFiles=("${args[@]:1}")
	numInpFile="${#inpFiles[@]}"
	if [ "$numInpFile" = 0 ]; then
		# if there are no remaining arguments

		if [ ! -t 0 ]; then
			# Without this judgment, it will wait if there is no pipe input and no argument input.
			# from pipe
			inpFiles=("-")
			numInpFile=1

			case "$forcedOutputDestType" in
			0 | 1)
				outIsFile=false
				;;
			2)
				error "cannot proceed with pipe input and replacement pattern specification"
				;;
			3)
				outIsFile=true
				outFiles=("$forcedOutputDest")
				;;
			esac
		else
			error "inp data is not set"
		fi
	else
		pipeInInp=false
		psSubInInp=false
		while [ "${#args[@]}" -gt 1 ]
		do
			local _inp="${args[1]}"
			if [ "$_inp" = "-" ]; then
				# if input from pipe
				pipeInInp=true

			elif [[ "$_inp" =~ ^/dev/fd ]]; then
				# if input by process substitution
				psSubInInp=true
			fi
			shift_args 1
		done

		if "$pipeInInp" || "$psSubInInp"; then
			case "$forcedOutputDestType" in
			0 | 1)
				outIsFile=false
				;;
			2)
				error "cannot proceed with replacement pattern specification and pipe input or ps sub"
				;;
			3)
				outIsFile=true
				outFiles=()
				for i in `seq "$numInpFile"`; do outFiles+=("$forcedOutputDest"); done
				;;
			esac
		else
			# all input is file
			case "$forcedOutputDestType" in
			0)
				if [ -t 1 ]; then
					# out to file which is named by default patt
					outIsFile=true
					local patt=`get_default_conversion_patt`
					outFiles=()
					for i in `seq 0 "$(($numInpFile-1))"`; do outFiles+=(`echo "${inpFiles[i]}" | sed -r "$patt"`); done

				else
					outIsFile=false

				fi

				;;
			1)
				outIsFile=false
				;;
			2)
				outIsFile=true
				outFiles=()
				for i in `seq 0 "$(($numInpFile-1))"`; do outFiles+=(`echo "${inpFiles[i]}" | sed -r "$forcedOutputDestPatt"`); done
				;;
			3)
				outIsFile=true
				outFiles=()
				for i in `seq "$numInpFile"`; do outFiles+=("$forcedOutputDest"); done
				;;
			esac
		fi
	fi

}

#function parse_option(){
#	# parse option from "${args[@]}"
#}

#function get_default_conversion_patt(){
#	echo '{s/out$//; s/$/csv/}'
#}

#function process(){
#	# $1: inpFile
#	# limit 'cat "$1"' to one execution because of cat -
#}

function main(){
	set_args "$@"
	parse_args "$@"

	for i in `seq 0 "$(($numInpFile-1))"`
	do
		local inpFile="${inpFiles[i]}"
		if "$outIsFile"; then
			# change output file
			local outFile="${outFiles[i]}"
			exec > "$outFile"
		else
			# Because it always outputs to a file or to standard output
			:
		fi

		# convert file
		process "$inpFile"
	done
}




